{"ast":null,"code":"class MainApi {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      baseUrlMovies,\n      headers,\n      credentials\n    } = _ref;\n    this.baseUrl = baseUrl;\n    this.baseUrlMovies = baseUrlMovies;\n    this.headers = headers;\n    this.credentials = credentials;\n  }\n  _getResponseData(res) {\n    if (!res.ok) {\n      return Promise.reject(res.status);\n    }\n    return res.json();\n  }\n\n  // Запрос массив фильмов\n  getInitialMovies() {\n    return fetch(this.baseUrl + \"/movies\", {\n      headers: this.headers,\n      credentials: this.credentials\n    }).then(res => {\n      return this._getResponseData(res);\n    });\n  }\n\n  // Другие методы работы с API\n  getInitialUsers() {\n    return fetch(this.baseUrl + \"/users/me\", {\n      headers: this.headers,\n      credentials: this.credentials\n    }).then(res => {\n      return this._getResponseData(res);\n    });\n  }\n\n  // Отправляем данные пользователя на авторизацию \n  setAuthorizeUser(email, password) {\n    return fetch(this.baseUrl + \"/signin\", {\n      method: \"POST\",\n      headers: this.headers,\n      credentials: this.credentials,\n      body: JSON.stringify({\n        email: email,\n        password: password\n      })\n    }).then(res => {\n      return this._getResponseData(res);\n    }).then(data => {\n      return data;\n    });\n  }\n\n  // Регестрируем нового пользователя\n  setRegisterUser(name, email, password) {\n    return fetch(this.baseUrl + \"/signup\", {\n      method: \"POST\",\n      headers: this.headers,\n      credentials: this.credentials,\n      body: JSON.stringify({\n        name: name,\n        email: email,\n        password: password\n      })\n    }).then(res => {\n      return this._getResponseData(res);\n    }).then(data => {\n      return data;\n    });\n  }\n\n  // Проверяем JWT пользователя \n  getAuthenticationUser() {\n    return fetch(this.baseUrl + \"/users/me\", {\n      method: \"GET\",\n      credentials: this.credentials,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      return this._getResponseData(res);\n    });\n  }\n  getLogout() {\n    return fetch(this.baseUrl + \"/signout\", {\n      method: 'POST',\n      headers: this._headers,\n      credentials: this.credentials\n    }).then(res => {\n      return this._getResponseData(res);\n    });\n  }\n  setInitialUsers(name, email) {\n    return fetch(this.baseUrl + \"/users/me\", {\n      method: \"PATCH\",\n      headers: this.headers,\n      credentials: this.credentials,\n      body: JSON.stringify({\n        name: name,\n        email: email\n      })\n    }).then(res => {\n      return this._getResponseData(res);\n    });\n  }\n  setAddNewMovies(dataMovies) {\n    return fetch(this.baseUrl + \"/movies\", {\n      method: \"POST\",\n      headers: this.headers,\n      credentials: this.credentials,\n      body: JSON.stringify({\n        country: dataMovies.country,\n        director: dataMovies.director,\n        duration: dataMovies.duration,\n        year: dataMovies.year,\n        description: dataMovies.description,\n        image: this.baseUrlMovies + dataMovies.image.url,\n        trailerLink: dataMovies.trailerLink,\n        nameRU: dataMovies.nameRU,\n        nameEN: dataMovies.nameEN,\n        thumbnail: this.baseUrlMovies + dataMovies.image.url,\n        movieId: dataMovies.id\n      })\n    }).then(res => {\n      return this._getResponseData(res);\n    });\n  }\n  deleteMovies(movieId) {\n    return fetch(this.baseUrl + \"/movies/\" + movieId, {\n      method: \"DELETE\",\n      headers: this.headers,\n      credentials: this.credentials\n    }).then(res => {\n      return this._getResponseData(res);\n    });\n  }\n}\n\n// Делаем запрос по api для получения информации\nconst apiMain = new MainApi({\n  // baseUrl: \"https://api.golosnoy.nomoredomainsrocks.ru\",\n  baseUrl: \"http://localhost:3001\",\n  baseUrlMovies: 'https://api.nomoreparties.co',\n  credentials: \"include\",\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\nexport default apiMain;","map":{"version":3,"names":["MainApi","constructor","_ref","baseUrl","baseUrlMovies","headers","credentials","_getResponseData","res","ok","Promise","reject","status","json","getInitialMovies","fetch","then","getInitialUsers","setAuthorizeUser","email","password","method","body","JSON","stringify","data","setRegisterUser","name","getAuthenticationUser","getLogout","_headers","setInitialUsers","setAddNewMovies","dataMovies","country","director","duration","year","description","image","url","trailerLink","nameRU","nameEN","thumbnail","movieId","id","deleteMovies","apiMain"],"sources":["D:/dev/movies-explorer-frontend/src/utils/MainApi.js"],"sourcesContent":["class MainApi {\r\n    constructor({ baseUrl, baseUrlMovies, headers, credentials }) {\r\n        this.baseUrl = baseUrl;\r\n        this.baseUrlMovies = baseUrlMovies;\r\n        this.headers = headers;\r\n        this.credentials = credentials;\r\n    }\r\n\r\n    _getResponseData(res) {\r\n        if (!res.ok) {\r\n            return Promise.reject(res.status);\r\n        }\r\n        return res.json();\r\n    }\r\n\r\n    // Запрос массив фильмов\r\n    getInitialMovies() {\r\n        return fetch(this.baseUrl + \"/movies\", {\r\n            headers: this.headers,\r\n            credentials: this.credentials,\r\n        }).then((res) => {\r\n            return this._getResponseData(res);\r\n        });\r\n    }\r\n\r\n    // Другие методы работы с API\r\n    getInitialUsers() {\r\n        return fetch(this.baseUrl + \"/users/me\", {\r\n            headers: this.headers,\r\n            credentials: this.credentials,\r\n        }).then((res) => {\r\n            return this._getResponseData(res);\r\n        });\r\n    }\r\n\r\n    // Отправляем данные пользователя на авторизацию \r\n    setAuthorizeUser(email, password) {\r\n        return fetch(this.baseUrl + \"/signin\", {\r\n            method: \"POST\",\r\n            headers: this.headers,\r\n            credentials: this.credentials,\r\n            body: JSON.stringify({\r\n                email: email,\r\n                password: password,\r\n            }),\r\n        })\r\n            .then((res) => {\r\n                return this._getResponseData(res);\r\n            })\r\n            .then((data) => {\r\n                return data;\r\n            });\r\n    }\r\n\r\n    // Регестрируем нового пользователя\r\n    setRegisterUser(name, email, password) {\r\n        return fetch(this.baseUrl + \"/signup\", {\r\n            method: \"POST\",\r\n            headers: this.headers,\r\n            credentials: this.credentials,\r\n            body: JSON.stringify({\r\n                name: name,\r\n                email: email,\r\n                password: password,\r\n            }),\r\n        })\r\n            .then((res) => {\r\n                return this._getResponseData(res);\r\n            })\r\n            .then((data) => {\r\n                return data;\r\n            });\r\n    }\r\n\r\n    // Проверяем JWT пользователя \r\n    getAuthenticationUser() {\r\n        return fetch(this.baseUrl + \"/users/me\", {\r\n            method: \"GET\",\r\n            credentials: this.credentials,\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        }).then((res) => {\r\n            return this._getResponseData(res);\r\n        });\r\n    }\r\n\r\n    getLogout() {\r\n        return fetch(this.baseUrl + \"/signout\", {\r\n            method: 'POST',\r\n            headers: this._headers,\r\n            credentials: this.credentials,\r\n        })\r\n            .then((res) => {\r\n                return this._getResponseData(res);\r\n            })\r\n    }\r\n\r\n    setInitialUsers(name, email) {\r\n        return fetch(this.baseUrl + \"/users/me\", {\r\n            method: \"PATCH\",\r\n            headers: this.headers,\r\n            credentials: this.credentials,\r\n            body: JSON.stringify({\r\n                name: name,\r\n                email: email,\r\n            }),\r\n        }).then((res) => {\r\n            return this._getResponseData(res);\r\n        });\r\n    }\r\n\r\n    setAddNewMovies(dataMovies) {\r\n\r\n        return fetch(this.baseUrl + \"/movies\", {\r\n            method: \"POST\",\r\n            headers: this.headers,\r\n            credentials: this.credentials,\r\n            body: JSON.stringify({\r\n                country: dataMovies.country,\r\n                director: dataMovies.director,\r\n                duration: dataMovies.duration,\r\n                year: dataMovies.year,\r\n                description: dataMovies.description,\r\n                image: this.baseUrlMovies + dataMovies.image.url,\r\n                trailerLink: dataMovies.trailerLink,\r\n                nameRU: dataMovies.nameRU,\r\n                nameEN: dataMovies.nameEN,\r\n                thumbnail: this.baseUrlMovies + dataMovies.image.url,\r\n                movieId: dataMovies.id\r\n            }),\r\n        }).then((res) => {\r\n            return this._getResponseData(res);\r\n        });\r\n    }\r\n\r\n    deleteMovies(movieId) {\r\n        return fetch(this.baseUrl + \"/movies/\" + movieId, {\r\n            method: \"DELETE\",\r\n            headers: this.headers,\r\n            credentials: this.credentials,\r\n        }).then((res) => {\r\n            return this._getResponseData(res);\r\n        });\r\n    }\r\n\r\n}\r\n\r\n\r\n// Делаем запрос по api для получения информации\r\nconst apiMain = new MainApi({\r\n    // baseUrl: \"https://api.golosnoy.nomoredomainsrocks.ru\",\r\n    baseUrl: \"http://localhost:3001\",\r\n    baseUrlMovies: 'https://api.nomoreparties.co',\r\n    credentials: \"include\",\r\n    headers: {\r\n        \"Content-Type\": \"application/json\",\r\n    },\r\n});\r\n\r\nexport default apiMain;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}